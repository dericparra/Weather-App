{"version":3,"sources":["Text.js","App.js","serviceWorker.js","index.js"],"names":["Title","Styled","h1","Text","App","useState","location","setLocation","weather","setWeather","getWeather","lat","long","a","axios","get","params","lon","appid","lang","units","res","data","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","ClimaSection","ClimaDiv","ClimaTitle","ClimaDiv2","ClimaList","section","div","h2","ul","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4XAGA,IAAMA,EAAQC,IAAOC,GAAV,KAQIC,EAJF,kBACT,kBAACH,EAAD,+B,ytBCJWI,MAqCf,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACNC,EADM,KACIC,EADJ,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KAITC,EAAU,uCAAG,WAAOC,EAAKC,GAAZ,eAAAC,EAAA,sEACCC,IAAMC,IAAI,mCAAoC,CAC5DC,OAAQ,CACNL,IAAKA,EACLM,IAAKL,EACLM,MAAO,WACPC,KAAM,KACNC,MAAO,YAPI,OACXC,EADW,OAUfZ,EAAWY,EAAIC,MAVA,2CAAH,wDAqBd,OAPAC,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCjB,EAAWiB,EAASC,OAAOC,SAAUF,EAASC,OAAOE,WACrDvB,GAAY,QAEb,KAEc,IAAbD,EAEA,kBAAC,WAAD,qEAImB,IAAZE,EAEP,kBAAC,EAAD,MAIA,kBAACuB,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,oCAAyCzB,EAAO,QAAY,GAAnB,YAAzC,MAEF,kBAAC0B,EAAD,KACE,kBAACC,EAAD,KACE,kDAAwB3B,EAAO,KAAP,KAAxB,QACA,sDAAyBA,EAAO,KAAP,SAAzB,QACA,mDAAyBA,EAAO,KAAP,SAAzB,QACA,2CAAcA,EAAO,KAAP,SAAd,QACA,yCAAeA,EAAO,KAAP,SAAf,SAlFNuB,EAAe9B,IAAOmC,QAAV,KAMZJ,EAAW/B,IAAOoC,IAAV,KAMRJ,EAAahC,IAAOqC,GAAV,KAQVJ,EAAYjC,IAAOoC,IAAV,KAMTF,EAAYlC,IAAOsC,GAAV,KCpBKC,QACW,cAA7BC,OAAOnC,SAASoC,UAEe,UAA7BD,OAAOnC,SAASoC,UAEhBD,OAAOnC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACzC,EAAD,MAAS0C,SAASC,eAAe,SD6H3C,kBAAmBvB,WACrBA,UAAUwB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.437c5a05.chunk.js","sourcesContent":["import React from 'react'\r\nimport Styled from 'styled-components'\r\n\r\nconst Title = Styled.h1`\r\ncolor: black;\r\n`\r\n\r\nconst Text = () => (\r\n    <Title>Carregando o clima...</Title>\r\n)\r\n\r\nexport default Text ","import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Text from './Text';\nimport Styled from 'styled-components';\nexport default App;\n\nconst ClimaSection = Styled.section`\nalign-item: center;\njustify-content: center;\nwidth: 100%;\n`\n\nconst ClimaDiv = Styled.div`\nposition: relative;\nwidth: 100%;\nflex-wrap: nowrap;\n`\n\nconst ClimaTitle = Styled.h2`\nfont-size: 40px;\nwrap: no-wrap;\nleft: 50%;\nposition: absolute;\ntransform: translateX(-50%);\n`\n\nconst ClimaDiv2 = Styled.div`\nflex: 1;\nposition: relative;\nwidth: 100%;\n`\n\nconst ClimaList = Styled.ul`\nfont-size: 25px;\nlist-style: none;\nleft: 50%;\nposition: absolute;\ntransform: translateX(-50%);\nmargin-top: 7%\n`\n\nfunction App() {\n  const [location, setLocation] = useState(false);\n  const [weather, setWeather] = useState(false);\n\n  let getWeather = async (lat, long) => {\n    let res = await axios.get(\"https://api.hgbrasil.com/weather\", {\n      params: {\n        lat: lat,\n        lon: long,\n        appid: \"9ebce9c7\",\n        lang: 'pt',\n        units: 'metric'\n      }\n    });\n    setWeather(res.data);\n  }\n\n\n  useEffect(()=> {\n    navigator.geolocation.getCurrentPosition((position)=> {\n      getWeather(position.coords.latitude, position.coords.longitude);\n      setLocation(true)\n    })\n  }, [])\n\n  if (location === false) {\n    return (\n      <Fragment>\n        Você precisa habilitar a localização no browser o/\n      </Fragment>\n    )\n  } else if (weather === false) {\n    return (\n      <Text />\n    )\n  } else {\n    return (\n      <ClimaSection>\n        <ClimaDiv>\n          <ClimaTitle>Clima nas suas Coordenadas ({weather['weather'][0]['description']})</ClimaTitle>\n        </ClimaDiv>\n        <ClimaDiv2>\n          <ClimaList>\n            <li>Temperatura atual: {weather['main']['temp']}°</li>\n            <li>Temperatura máxima: {weather['main']['temp_max']}°</li>\n            <li>Temperatura minima: {weather['main']['temp_min']}°</li>\n            <li>Pressão: {weather['main']['pressure']} hpa</li>\n            <li>Humidade: {weather['main']['humidity']}%</li>\n          </ClimaList>\n        </ClimaDiv2>\n      </ClimaSection>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}